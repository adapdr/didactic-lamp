# generated by datamodel-codegen:
#   filename:  data.json
#   timestamp: 2023-03-12T22:19:51+00:00
import json

from typing import List, Optional, Union

from pydantic import BaseModel


class Token(BaseModel):
    type: str
    network: str
    address: str
    symbol: str
    decimals: int
    price: float
    balance: float
    balanceRaw: str
    balanceUSD: float


class DataProps(BaseModel):
    liquidity: float
    reserves: List[float]
    apy: float
    fee: float
    volume: float


class ValueItem(BaseModel):
    type: str
    value: float


class StatsItem(BaseModel):
    label: str
    value: Union[str, ValueItem]


class DisplayProps(BaseModel):
    label: str
    secondaryLabel: str
    tertiaryLabel: Optional[str] = None
    images: List[str]
    statsItems: List[StatsItem]


class Asset(BaseModel):
    key: str
    type: str
    appId: str
    groupId: str
    network: str
    address: str
    tokens: List[Token]
    symbol: str
    decimals: int
    supply: float
    pricePerShare: List[float]
    price: float
    dataProps: DataProps
    displayProps: DisplayProps
    balance: float
    balanceRaw: str
    balanceUSD: float


class Product(BaseModel):
    label: str
    assets: List[Asset]
    meta: List


schema_extra: dict
with open('api/integrations/zapper/data.json') as f:
    schema_extra = {
        "examples": [json.load(f)]
    }


class Model(BaseModel):
    key: str
    address: str
    appId: str
    appName: str
    appImage: str
    network: str
    updatedAt: str
    balanceUSD: float
    products: List[Product]

    class Config:
        schema_extra = schema_extra
